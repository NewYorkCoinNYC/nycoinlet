// Generated by CoffeeScript 1.6.3
/*
Module dependencies.
*/


(function() {
  var EMAIL_REGEX, RedisStore, SALT, app, connect, crypto, newyorkcoin, express, get_email_hash, http, login_required, mailer, path, security_error;

  express = require("express");

  http = require("http");

  path = require("path");

  crypto = require('crypto');

  connect = require('connect');

  RedisStore = require('connect-redis')(connect);

  app = express();

  require('./config')(app);

  newyorkcoin = (require('node-newyorkcoin'))();

  newyorkcoin.auth(app.get('newyorkcoin_username'), app.get('newyorkcoin_password')).set('host', 'localhost').set({
    port: 22555
  });

  app.set('name', 'nycoinlet');

  app.set('admin_email', "info@dogelet.com");

  app.set('email_name', 'DogeLet');

  require('implied-mail').sendgrid(app);

  mailer = app.get('mailer');

  app.set("port", process.env.PORT || 3000);

  app.set("views", __dirname + "/views");

  app.set("view engine", "jade");

  SALT = app.get('salt');

  app.use(express.cookieParser());

  app.use(connect.session({
    store: new RedisStore({
      port: 6379,
      host: 'localhost'
    }),
    secret: app.get('secret')
  }));

  app.use(express.favicon());

  app.use(express.logger("dev"));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(function(req, res, next) {
    res.locals.req = res.locals.request = req;
    return next();
  });

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, "public")));

  if ("development" === app.get("env")) {
    app.use(express.errorHandler());
  }

  EMAIL_REGEX = /[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;

  get_email_hash = function(email, callback) {
    var hash;
    if (!EMAIL_REGEX.test(email)) {
      throw 'Invalid Email';
    }
    return hash = crypto.createHmac('sha224', SALT).update(email).digest('hex');
  };

  security_error = function(res, msg) {
    return res.render('message', {
      message: msg
    });
  };

  login_required = function(req, res, next) {
    if (req.session.email) {
      if (req.session.address) {
        return next();
      } else {
        return res.send('Your account seems broken.');
      }
    } else {
      return res.send('Login first.');
    }
  };

  app.get('/', function(req, res) {
    var email;
    email = req.session.email;
    if (email && req.session.address) {
      return newyorkcoin.getBalance(email, function(err, result) {
        if (err) {
          return security_error(res, '' + err);
        }
        if (typeof result !== 'number') {
          result = result.result;
        }
        return res.render('index', {
          balance: result,
          address: req.session.address
        });
      });
    } else {
      return res.render('index', {
        email: null
      });
    }
  });

  app.get('/signup', function(req, res) {
    var email, hash;
    email = req.query.email;
    hash = get_email_hash(email);
    if (!EMAIL_REGEX.test(email)) {
      return security_error(res, 'Invalid email address.');
    }
    return newyorkcoin.getAddressesByAccount(email, function(err, result) {
      if (err) {
        return security_error(res, '' + err);
      }
      if (result.length) {
        return mailer.send_mail({
          to: email,
          subject: "Your NYCoinLet (NewYorkCoin wallet)",
          body: "Here's your secure NYCoinLet link:\n\nhttp://" + (app.get('host')) + "/login?email=" + email + "&hash=" + hash + "\n\nWARNING: Never share this with anyone, as they will be able to use your wallet!\n"
        }, function(success, message) {
          if (!success) {
            return security_error(res, message);
          }
          return security_error(res, 'You already have a wallet. Check your email (search inbox for NYCoinLet.net)');
        });
      } else {
        return newyorkcoin.getNewAddress(email, function(err, result) {
          if (err) {
            return security_error(res, err);
          }
          return mailer.send_mail({
            to: email,
            subject: "Your New NYCoinLet (NewYorkCoin wallet)",
            body: "Here's your secure NYCoinLet link:\n\nhttp://" + (app.get('host')) + "/login?email=" + email + "&hash=" + hash + "\n\nWARNING: Never share this with anyone, as they will be able to use your wallet!\n"
          }, function(success, message) {
            if (!success) {
              return security_error(res, message);
            }
            return security_error(res, 'Your new wallet has been created! Check your email (search inbox for NYCoinLet.net)');
          });
        });
      }
    });
  });

  app.get('/login', function(req, res) {
    if (!EMAIL_REGEX.test(req.query.email)) {
      return security_error(res, 'Invalid email address.');
    }
    if (get_email_hash(req.query.email) === req.query.hash) {
      req.session.email = req.query.email;
      return newyorkcoin.getAddressesByAccount(req.query.email, function(err, result) {
        if (result.length !== 1) {
          return security_error(res, "Duplicate address.");
        }
        req.session.address = result[0];
        return res.redirect('/');
      });
    } else {
      req.session.email = null;
      req.session.address = null;
      return security_error(res, 'Bad credentials.');
    }
  });

  app.get('/send', login_required, function(req, res) {
    var email;
    email = req.query.email;
    if (email !== req.session.email) {
      return security_error(res, 'Sender email does not match account email.');
    }
    if (!/[0-9]*\.?[0-9]/.test(req.query.amount)) {
      return security_error(res, 'Badly formed amount.');
    }
    if (!/[a-zA-Z\d]+/.test(req.query.send_to)) {
      return security_error(res, 'Badly formed recipient address');
    }
    return newyorkcoin.validateAddress(req.query.send_to, function(err, result) {
      if (err) {
        return security_error('' + err);
      }
      if (result.isvalid) {
        return newyorkcoin.sendFrom(email, req.query.send_to, parseFloat(req.query.amount), 1, function() {
          return res.send(arguments);
        });
      }
    });
  });

  app.get('/history', login_required, function(req, res) {
    var page;
    page = parseInt(req.query.page || '0');
    return newyorkcoin.listTransactions(req.session.email, 11, page * 0, function(err, transactions) {
      if (err) {
        return security_error('' + err);
      }
      return res.render('history', {
        transactions: transactions,
        page: page
      });
    });
  });

  app.get('/history/:tid', login_required, function(req, res) {
    return newyorkcoin.gettransaction(req.params.tid, function(err, transaction) {
      if (err) {
        return security_error('' + err);
      }
      return res.send(transaction);
    });
  });

  app.get('/logout', function(req, res) {
    req.session.email = null;
    req.session.address = null;
    return res.redirect('/');
  });

  http.createServer(app).listen(app.get("port"), function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

}).call(this);
